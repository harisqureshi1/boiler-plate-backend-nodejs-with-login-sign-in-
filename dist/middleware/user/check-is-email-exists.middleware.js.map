{"version":3,"file":"check-is-email-exists.middleware.js","sourceRoot":"","sources":["../../../src/middleware/user/check-is-email-exists.middleware.ts"],"names":[],"mappings":";;;AACA,+CAA0D;AAC1D,yCAA0D;AAC1D,6CAA6C;AAEtC,MAAM,4BAA4B,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAgC,EAAE;IAClI,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAM,WAAW,GAAG,MAAM,sBAAW,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAEjE,IAAI,WAAW,EAAE;QACf,OAAO,IAAI,CAAC,IAAI,qBAAY,CAC1B,mCAAuB,CAAC,WAAW,EACnC,qBAAY,CAAC,2BAA2B,CAAC,OAAO,EAChD,qBAAY,CAAC,2BAA2B,CAAC,IAAI,CAC9C,CAAC,CAAC;KACJ;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AAbW,QAAA,4BAA4B,gCAavC","sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { ResponseStatusCodesEnum } from '../../constants';\r\nimport { customErrors, ErrorHandler } from '../../errors';\r\nimport { userService } from '../../services';\r\n\r\nexport const checkIsEmailExistsMiddleware = async (req: Request, res: Response, next: NextFunction): Promise<void | NextFunction> => {\r\n  const { email } = req.body;\r\n  const userByEmail = await userService.findOneByParams({ email });\r\n\r\n  if (userByEmail) {\r\n    return next(new ErrorHandler(\r\n      ResponseStatusCodesEnum.BAD_REQUEST,\r\n      customErrors.BAD_REQUEST_USER_REGISTERED.message,\r\n      customErrors.BAD_REQUEST_USER_REGISTERED.code\r\n    ));\r\n  }\r\n\r\n  next();\r\n};\r\n"]}