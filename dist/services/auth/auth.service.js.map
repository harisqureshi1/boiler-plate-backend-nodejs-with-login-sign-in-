{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../src/services/auth/auth.service.ts"],"names":[],"mappings":";;;AAAA,6CAAkD;AAGlD,MAAM,WAAW;IACf,eAAe,CAAC,WAAkC;QAChD,MAAM,cAAc,GAAG,IAAI,2BAAgB,CAAC,WAAW,CAAC,CAAC;QAEzD,OAAO,cAAc,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,UAA2D;;QAC/E,MAAM,YAAY,GAAG,MAAM,2BAAgB;aACxC,OAAO,CAAC,UAAU,CAAC;aACnB,QAAQ,CAAC,QAAQ,CAAC;aAClB,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAQ,CAAC;QAExC,OAAO,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,0CAAE,MAAM,EAAE,CAAC;IACxC,CAAC;IAED,WAAW,CAAC,YAA2D;QACrE,OAAO,2BAAgB,CAAC,gBAAgB,CAAC,YAAY,CAA4C,CAAC;IACpG,CAAC;CACF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import { AccessTokenModel } from '../../database';\r\nimport { IAccessToken, IUser } from '../../interfaces';\r\n\r\nclass AuthService {\r\n  createTokenPair(tokenObject: Partial<IAccessToken>): Promise<IAccessToken> {\r\n    const tokensToCreate = new AccessTokenModel(tokenObject);\r\n\r\n    return tokensToCreate.save();\r\n  }\r\n\r\n  async findUserByToken(findObject: { accessToken?: string, refreshToken?: string }): Promise<IUser | null> {\r\n    const tokenAndUser = await AccessTokenModel\r\n      .findOne(findObject)\r\n      .populate('userId')\r\n      .select({ userId: 1, _id: 0 }) as any;\r\n\r\n    return tokenAndUser?.userId?.toJSON();\r\n  }\r\n\r\n  removeToken(removeObject: {accessToken?: string, refreshToken?: string}): Promise<IAccessToken | null> {\r\n    return AccessTokenModel.findOneAndDelete(removeObject) as unknown as Promise<IAccessToken | null>;\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\n"]}