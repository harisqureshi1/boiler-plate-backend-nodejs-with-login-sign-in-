{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/services/user/user.service.ts"],"names":[],"mappings":";;;AAAA,uCAAiC;AACjC,6CAA2C;AAI3C,MAAM,WAAW;IACf,UAAU,CAAC,IAAoB;QAC7B,MAAM,YAAY,GAAG,IAAI,oBAAS,CAAC,IAAI,CAAC,CAAC;QAEzC,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,MAAc,EAAE,WAAuB;QACpD,OAAO,oBAAS,CAAC,SAAS,CACxB,EAAE,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EACnC;YACE,KAAK,EAAE;gBACL,MAAM,EAAE,WAAW;aACpB;SACF,CAC2B,CAAC;IACjC,CAAC;IAED,kBAAkB,CAAC,MAAsB,EAAE,MAAsB;QAC/D,OAAO,oBAAS,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,EAAC,GAAG,EAAE,IAAI,EAAC,CAA8B,CAAC;IACvF,CAAC;IAED,eAAe,CAAC,UAA0B;QACxC,OAAO,oBAAS,CAAC,OAAO,CAAC,UAAU,CAAqC,CAAC;IAC3E,CAAC;IAED,qBAAqB,CAAC,MAAkB,EAAE,KAAa;QACrD,OAAO,oBAAS,CAAC,OAAO,CAAC;YACvB,IAAI,EAAE;gBACJ,EAAE,eAAe,EAAE,MAAM,EAAE;gBAC3B,EAAE,cAAc,EAAE,KAAK,EAAE;aAC1B;SACF,CAAqC,CAAC;IACzC,CAAC;CACF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import { Types } from 'mongoose';\r\nimport { UserModel } from '../../database';\r\nimport { IUser, IUserToken } from '../../interfaces';\r\nimport { ActionEnum } from '../../constants';\r\n\r\nclass UserService {\r\n  createUser(user: Partial<IUser>): Promise<IUser>{\r\n    const userToCreate = new UserModel(user);\r\n\r\n    return userToCreate.save();\r\n  }\r\n\r\n  addActionToken(userId: string, tokenObject: IUserToken): Promise<IUser> {\r\n    return UserModel.updateOne(\r\n      { _id: new Types.ObjectId(userId) },\r\n      {\r\n        $push: {\r\n          tokens: tokenObject\r\n        }\r\n      }\r\n    ) as unknown as Promise<IUser>;\r\n  }\r\n\r\n  updateUserByParams(params: Partial<IUser>, update: Partial<IUser>): Promise<IUser> {\r\n    return UserModel.updateOne(params, update, {new: true}) as unknown as Promise<IUser>;\r\n  }\r\n\r\n  findOneByParams(findObject: Partial<IUser>): Promise<IUser | null> {\r\n    return UserModel.findOne(findObject) as unknown as Promise<IUser | null>;\r\n  }\r\n\r\n  findUserByActionToken(action: ActionEnum, token: string): Promise<IUser | null> {\r\n    return UserModel.findOne({\r\n      $and: [\r\n        { 'tokens.action': action },\r\n        { 'tokens.token': token }\r\n      ]\r\n    }) as unknown as Promise<IUser | null>;\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();\r\n"]}