{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../../src/controller/user/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport * as Joi from 'joi';\r\nimport { ActionEnum, LogEnum, RequestHeadersEnum, ResponseStatusCodesEnum, UserStatusEnum } from '../../constants';\r\nimport { customErrors, ErrorHandler } from '../../errors';\r\nimport { hashPassword, tokenGenerator } from '../../helpers';\r\nimport { IUser } from '../../interfaces';\r\nimport { logService, userService } from '../../services';\r\nimport { newUserValidator } from '../../validators';\r\nimport { config } from '../../config';\r\n\r\nclass UserController {\r\n  async createUser(req: Request, res: Response, next: NextFunction) {\r\n    const user = req.body as IUser;\r\n\r\n    user.photo = config.DEFAULT_AVATAR;\r\n\r\n    const { error } = Joi.validate(user, newUserValidator);\r\n\r\n    if (error){\r\n      return next(new Error(error.details[0].message));\r\n    }\r\n\r\n    user.password = await hashPassword(user.password);\r\n\r\n    const { _id } = await userService.createUser(user);\r\n    const { access_token } = tokenGenerator(ActionEnum.USER_REGISTER);\r\n    await userService.addActionToken(_id, { action: ActionEnum.USER_REGISTER, token: access_token });\r\n    await logService.createLog({ event: LogEnum.USER_REGISTERED, userId: _id });\r\n\r\n    res.sendStatus(ResponseStatusCodesEnum.CREATED);\r\n  }\r\n\r\n  async confirmUser(req: Request, res: Response, next: NextFunction) {\r\n\r\n    const { _id, status, tokens = [] } = req.user as IUser;\r\n    const tokenToDelete = req.get(RequestHeadersEnum.AUTHORIZATION);\r\n\r\n    if (status !== UserStatusEnum.PENDING) {\r\n      return next(\r\n        new ErrorHandler(\r\n          ResponseStatusCodesEnum.BAD_REQUEST,\r\n          customErrors.BAD_REQUEST_USER_ACTIVATED.message,\r\n          customErrors.BAD_REQUEST_USER_ACTIVATED.code\r\n        )\r\n      );\r\n    }\r\n\r\n    await userService.updateUserByParams({ _id }, { status: UserStatusEnum.CONFIRMED });\r\n\r\n    const index = tokens.findIndex(({ action, token }) => {\r\n      return token === tokenToDelete && action === ActionEnum.USER_REGISTER;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      tokens.splice(index, 1);\r\n\r\n      await userService.updateUserByParams({ _id }, { tokens } as Partial<IUser>);\r\n    }\r\n\r\n    await logService.createLog({ event: LogEnum.USER_CONFIRMED, userId: _id });\r\n\r\n    res.redirect(config.FRONTEND_URL);\r\n  }\r\n\r\n  async forgotPassword(req: Request, res: Response, next: NextFunction) {\r\n    const { _id } = req.user as IUser;\r\n    const { access_token } = tokenGenerator(ActionEnum.FORGOT_PASSWORD);\r\n    await userService.addActionToken(_id, { token:access_token, action: ActionEnum.FORGOT_PASSWORD });\r\n\r\n    res.end();\r\n  }\r\n\r\n  async setForgotPass(req: Request, res: Response, next: NextFunction) {\r\n    const { _id, tokens = [] } = req.user as IUser;\r\n    const { password } = req.body;\r\n    const tokenToDelete = req.get(RequestHeadersEnum.AUTHORIZATION);\r\n    const hashPass = await hashPassword(password);\r\n\r\n    await userService.updateUserByParams({ _id }, { password: hashPass });\r\n\r\n    const index = tokens.findIndex(({ action, token }) => {\r\n      return token === tokenToDelete && action === ActionEnum.FORGOT_PASSWORD;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      tokens.splice(index, 1);\r\n\r\n      await userService.updateUserByParams({ _id }, { tokens } as Partial<IUser>);\r\n    }\r\n\r\n    res.end();\r\n  }\r\n\r\n  async getUser(req: Request, res: Response, next: NextFunction) {\r\n    const { _id } = req.user as IUser;\r\n    const user = await userService.findOneByParams({_id});\r\n    res.json(user);\r\n  }\r\n\r\n  async updateUserSettings(req: Request, res: Response, next: NextFunction) {\r\n    const { _id, password } = req.user as IUser;\r\n    const { name, newPassword } = req.body;\r\n    console.log('password: ',password);\r\n    let hashPass = '';\r\n    if (newPassword){\r\n      hashPass = await hashPassword(newPassword);\r\n    }\r\n    await userService.updateUserByParams({ _id }, {login: name, password: hashPass ? hashPass : password });\r\n    res.end();\r\n  }\r\n}\r\n\r\nexport const userController = new UserController();\r\n"]}