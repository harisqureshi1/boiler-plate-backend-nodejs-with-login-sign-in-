{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../src/controller/auth/auth.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { ActionEnum, RequestHeadersEnum, ResponseStatusCodesEnum } from '../../constants';\r\nimport { customErrors, ErrorHandler } from '../../errors';\r\nimport { comparePassword, tokenGenerator } from '../../helpers';\r\nimport { IUser } from '../../interfaces';\r\nimport { authService, userService } from '../../services';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { config } from '../../config';\r\n\r\nclass AuthController {\r\n  async authUser(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      const { _id, password, login, email, photo = '' } = req.user as IUser;\r\n      console.log(password);\r\n      const authInfo = req.body;\r\n      console.log(authInfo.password);\r\n      const isPasswordEquals = await comparePassword(authInfo.password, password);\r\n\r\n      if (!isPasswordEquals) {\r\n        return next(new ErrorHandler(ResponseStatusCodesEnum.NOT_FOUND, customErrors.NOT_FOUND.message));\r\n      }\r\n\r\n      const { access_token, refresh_token } = tokenGenerator(ActionEnum.USER_AUTH);\r\n\r\n      await authService.createTokenPair({\r\n        accessToken: access_token,\r\n        refreshToken: refresh_token,\r\n        userId: _id\r\n      });\r\n\r\n      res.json({ access_token, refresh_token, _id, login, email, photo });\r\n    } catch (e) {\r\n      return next(e);\r\n    }\r\n  }\r\n\r\n  async logoutUser(req: Request, res: Response, next: NextFunction) {\r\n    const accessToken = req.get(RequestHeadersEnum.AUTHORIZATION);\r\n    await authService.removeToken({ accessToken });\r\n    res.sendStatus(ResponseStatusCodesEnum.NO_CONTENT);\r\n  }\r\n\r\n  async checkEmail(req: Request, res: Response, next: NextFunction) {\r\n    const { email } = req.body;\r\n    const found = await userService.findOneByParams({ email }) ? true : false;\r\n    res.json({ found });\r\n  }\r\n\r\n  verifyAuth(req: Request, res: Response, next: NextFunction){\r\n    try {\r\n      let decoded = null;\r\n      let accessToken = req.get(RequestHeadersEnum.AUTHORIZATION) as string;\r\n      if (accessToken?.includes('Bearer')){\r\n        accessToken = accessToken.split(' ')[1];\r\n      }\r\n      const JWT_SECRET = config.JWT_SECRET as string;\r\n      if (accessToken) {\r\n        decoded = jwt.verify(accessToken, JWT_SECRET) ;\r\n      }\r\n      if (decoded) {\r\n        next();\r\n      } else {\r\n        res\r\n          .status(401)\r\n          .json({ err: 'You need to be logged in to access this data' });\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log('auth error: ', error);\r\n      next({\r\n        message: 'Auth failed',\r\n        status: 401\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport const authController = new AuthController();\r\n"]}